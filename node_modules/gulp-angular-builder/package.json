{
  "name": "gulp-angular-builder",
  "version": "0.2.5",
  "description": "Gulp plugin to filter and include only necessary AngularJS files.",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/Tapad/gulp-angular-builder"
  },
  "keywords": [
    "gulpplugin",
    "angular",
    "filter",
    "template"
  ],
  "author": {
    "name": "Jesse Zhang"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/Tapad/gulp-angular-builder/issues"
  },
  "homepage": "https://github.com/Tapad/gulp-angular-builder",
  "dependencies": {
    "esprima": "^1.2.2",
    "chalk": "^0.5.1",
    "glob": "^4.0.5",
    "through2": "^0.5.1",
    "htmlparser2": "^3.7.3",
    "gulp-util": "^3.0.0"
  },
  "readme": "# [gulp](http://gulpjs.com)-angular-builder\n\n> Gulp plugin to filter and include only necessary AngularJS files.\n\n---\n## Wat?\n* Share common libraries and Angular directives, services, templates, etc. across multiple projects\n* Filter down to the minimal set of required files via the dependency tree\n\n---\n## Install\nInstall with [npm](https://npmjs.org/package/gulp-angular-builder)\n\n```\nnpm install --save-dev gulp-angular-builder\n```\n---\nBest used together with:\n* [gulp-concat](https://www.npmjs.org/package/gulp-concat)\n* [gulp-filter](https://www.npmjs.org/package/gulp-filter)\n* [gulp-angular-templatecache](https://www.npmjs.org/package/gulp-angular-templatecache)\n* [gulp-clone](https://www.npmjs.org/package/gulp-clone)\n\n---\n## Usage\n```\nvar angularbuilder = require(\"gulp-angular-builder\");\ngulp.task(\"build-files\", function () {\n    return gulp.src([\n        // All js, html (ejs), and json files to consider\n        \"./shared/**/*.+(js|html|json)\",\n        \"./local/**/*.+(js|html|json)\",\n        \"./index.html.ejs\"\n    ]).pipe(\n        angularbuilder(seed, options)\n    ).pipe(\n        // Do other things!\n    );\n};\n```\n### angularbuilder(seed, options)\n* **seed** (Array | String): File or files to start building dependency tree from.\n* **options** (Object): Config object, detailed below.\n\n---\n## Options\nDependency Tree Building:\n* **parseExclude** (Array<sup>1</sup> | String | RegExp): Files not parsed for dependencies (e.g. non-Angular library files).\n* **requiredFiles** (Array<sup>1</sup> | String | RegExp): Files included *and* parsed, even if they are not directly depended on (e.g. files with only decorators in them). This is different from the *seed* input as that should be shared amongst multiple projects while this should not be.\n\nAdditional Files:\n* **requiredLibs** (Array<sup>1</sup> | String | RegExp): Files included but *not* parsed for dependencies. Use this in conjunction with *parseExclude*.\n* **optionalLibs** (Array<sup>1</sup> | String | RegExp): Optional library files that, if depended on, will also include all files matched by the *optionalLibsInclude*.\n* **optionalLibsInclude** (String): Glob of files relative to the optional library file to be included if the optional library file is depended on.\n\nModules and Dependencies:\n* **appModule** (String): Name of main Angular module. This will be used to create an `init.js` file in the stream which will contain `angular.module(appModule, [all required modules]);`.\n* **globalModules** (Array | String): Modules to include in the `init.js` modules list that will not be found via the dependency tree building (e.g. modules in files from both *requiredLibs* and *parseExclude*).\n* **globalDependencies** (Array | String): Dependencies that will be defined globally but will not be found via the dependency tree building (e.g. dependencies from modules in *globalModules*). Unfound dependencies will throw a gulp error otherwise.\n* **filesWithResolvedDeps** (Array<sup>1</sup> | String | RegExp): Files that contain resolved dependencies (e.g. ui-bootstrap modal controllers).\n\nMisc:\n* **ignoredTemplates** (Array<sup>1</sup> | String | RegExp): Template strings to ignore looking for. \n* **filePriority** (Array | String): Files sorted to the top of the stream.\n\n<sup>1</sup> Array of Strings or RegExps. Files are selected by partial matches.\n\n---\n## Notes\n#### Automatically Required Files\n* All parsed files containing `angular.module(...).run(...)` and `angular.module(...).config(...)` will be required and treated like a *seed* file.\n* Parsed files that are depended on by a *seed* file will be required. This includes *services/factories/controllers/etc.*, *templates*, *filters*, and *animations*.\n\n#### Enforced Conventions:\n* Must use the `angular.module` for defining items\n    * `angular.module(moduleName).item(itemName, function (dep1, dep2, dep3) { ... })`\n    * `angular.module(moduleName).item(itemName, [\"dep1\", \"dep2\", \"dep3\", function (dep1, dep2, dep3) { ... })`\n* Directives need to return an object, not a reference to an object\n    * `return { templateUrl: \"...\", link: \"...\" };`\n    * Not `var d = { templateUrl: \"...\", link: \"...\" }; return d;`\n\n#### Misc:\n* All dependencies beginning with $ will be ignored.\n* Inline controllers within directives will be parsed if the controller function block is defined in the return object (i.e. not a reference to the controller).\n* Anything that matches the pattern `\"controller\": \"SomeCtrl\"` will consider `SomeCtrl` to be a dependency. (Quotes can be single or double; object key does not require quotes.)\n* All strings found in the file ending in *.html* or *.json* will be considered a template of that file (unless ignored via the *ignoredTemplates* option).\n\n---\n## Limitations\n* Dynamically built template URLs will not be included (in both html partials and js files)\n* No support (yet?) for $inject property\n\n---\n## Example\n\n##### config.js\n```\nmodule.exports = {\n    seed: [\n        \"./index.html.ejs\"\n    ],\n    options: {\n        parseExclude: [\n            \"/libs/\",\n            /\\/libs-optional\\/[^\\/]+\\/includes\\//i\n        ],\n        requiredFiles: [],\n        ignoredTemplates: [\n            /assets/\n        ],\n        requiredLibs: [\n            \"/libs/\"\n        ],\n        filePriority: [\n            \"jquery.js\",\n            \"lodash.js\",\n            \"angular.js\"\n        ],\n        optionalLibs: [\n            \"/libs-optional/\"\n        ],\n        optionalLibsInclude: \"includes/*.js\",\n        globalDependencies: [\n            \"Restangular\"\n        ],\n        appModule: \"myAngularApp\",\n        globalModules: [\n            \"ngAnimate\",\n            \"ui.router\",\n            \"ui.bootstrap\",\n            \"restangular\"\n        ],\n        filesWithResolvedDeps: [\n            /modal/i\n        ]\n    }\n}\n```\n\n##### gulpfile.js\n```\nvar gulp = require(\"gulp\"),\n    gutil = require(\"gulp-util\"),\n    gulpFilter = require(\"gulp-filter\"),\n    angularbuilder = require(\"gulp-angular-builder\"),\n    sourcemaps = require(\"gulp-sourcemaps\"),\n    concat = require(\"gulp-concat\"),\n    footer = require(\"gulp-footer\"),\n    ejs = require(\"gulp-ejs\"),\n    templateCache = require(\"gulp-angular-templatecache\"),\n    clone = require(\"gulp-clone\"),\n    uglify = require(\"gulp-uglify\"),\n    plumber = require(\"gulp-plumber\"),\n    watch = require(\"gulp-watch\");\n\nvar config = require(\"./config.js\");\n\ngulp.task(\"default\", function () {\n    var angularTree = angularbuilder(config.seed, config.options);\n\n    // Filters\n    var indexTemplate = gulpFilter(\"**/index.html.ejs\");\n    var templates = gulpFilter([\n        \"**/*.html\",\n        \"**/*.json\"\n    ]);\n\n    var jsFilters = {\n        libs: gulpFilter(\"**/+(libs|libs-optional)/**/*.js\"),\n        controllers: gulpFilter(\"**/*-controller.js\"),\n        directives: gulpFilter(\"**/*-directive.js\"),\n        services: gulpFilter([\n            \"**/*-service.js\",\n            \"**/*-provider.js\",\n            \"**/*-factory.js\"\n        ]),\n        app: gulpFilter([\n            \"**/init.js\", // init is from angularbuilder\n            \"**/+(app|routes|filters|animations|endpoints).js\"\n        ])\n    };\n\n    // Clone templates\n    var templatesClone = clone.sink();\n\n    // action starts here\n    var stream = gulp.src([\n        // All js and html files in shared or local\n        \"./+(shared|local)/*/**/*.+(js|html|json)\",\n        \"./index.html.ejs\"\n    ]).pipe(plumber(config.errorHandler));\n\n    // Build the Angular tree and filter out only files that are needed\n    stream = stream.pipe(\n        angularTree\n    );\n\n    // Build libs, controllers, directives, apps file\n    Object.keys(jsFilters).forEach(function (item) {\n        stream = stream.pipe(\n            jsFilters[item]\n        ).pipe(concat(\"target/js/\" + item + (args.minify ? \".min\" : \"\") + \".js\", {\n            newLine: \"\\n;\\n\"\n        }))pipe(\n            jsFilters[item].restore()\n        );\n    });\n\n    // Build index.html\n    stream = stream.pipe(\n        indexTemplate\n    ).pipe(ejs({\n        min: \".min\"\n    }, {\n        ext: \"\"\n    })).pipe(\n        indexTemplate.restore()\n    );\n\n    // Build templates file and copy all html\n    stream = stream.pipe(\n        templates\n    ).pipe(\n        templatesClone\n    ).pipe(\n        templateCache(\"target/js/templates.js\", {\n            module: \"myAngularApp\"\n        })\n    );\n    stream = stream.pipe(\n        templates.restore()\n    ).pipe(\n        templatesClone.tap()\n    );\n\n    // Write it out\n    stream = stream.pipe(gulp.dest(\"./dist\"));\n\n    return stream;\n});\n```\n\n##### shared/app/app.js (local/app/app.js can be similar)\nThis file is automatically included because of the `angular.module(...).run(...)`\n```\nangular.module(\"myAngularApp\").run([\"SomeService\", \"SomeLibrary\", function (SomeService, SomeLibrary) {\n    // SomeService will be looked for and included in services.js\n    // SomeLibrary will be searched for and included in libs.js\n});\n```\n\n##### shared/app/routes.js (local/app/routes.js can be similar)\nThis file is automatically included because of the `angular.module(...).config(...)`\n```\nangular.module(\"myAngularApp\").config([\"$stateProvider\", \"$urlRouterProvider\",\n    function ($stateProvider, $urlRouterProvider) {\n        // UserCtrl, LoginCtrl, and ForbiddenCtrl will be looked for and included in controllers.js\n        // The templates will also be looked for and included in the template cache file\n        \n        $stateProvider\n            .state(\"user\", {\n                url: \"/user/profile\",\n                templateUrl: \"shared/app/user/user-partial.html\",\n                controller: \"UserCtrl\"\n            });\n\n        $stateProvider\n            .state(\"login\", {\n                url: \"/login?to\",\n                templateUrl: \"shared/app/login/login-partial.html\",\n                controller: \"LoginCtrl\"\n            });\n\n        $stateProvider\n            .state(\"forbidden\", {\n                url: \"/forbidden?from\",\n                templateUrl: \"shared/app/forbidden/forbidden-partial.html\",\n                controller: \"ForbiddenCtrl\"\n            });\n    }\n]);\n```\n\n##### shared/libs-optional/myLib/lib.js (local/libs-optional/myLib/lib.js can be similar)\nThis file is included because of the `SomeLibrary` dependency in `shared/app/app.js`.\n```\nangular.module(\"myLib\", []).service(\"SomeLibrary\", function () {\n    return window.someGlobalLibrary;\n});\n```\n\n##### shared/libs-optional/myLib/includes/nonAngularLib.js\nThis file is included because `SomeLibrary` is required and this file is within the optional libs include folder.\n```\nvar someNonAngularLib = function () {};\n```",
  "readmeFilename": "README.md",
  "_id": "gulp-angular-builder@0.2.5",
  "dist": {
    "shasum": "168648de800d2226ef145c570f76a45baccf388b"
  },
  "_from": "gulp-angular-builder@",
  "_resolved": "https://registry.npmjs.org/gulp-angular-builder/-/gulp-angular-builder-0.2.5.tgz"
}
